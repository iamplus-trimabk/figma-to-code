/**
 * Button Component - Generated by Stage 3 Component Generator (Phase 2: Template-Driven)
 *
 * forgot-password? - Interactive UI component with user interactions
 * Design tokens integrated from Stage 2 outputs for consistent styling
 */

"use client"

import * as React from "react"

import { cva, type VariantProps } from "class-variance-authority"

// Design tokens from Stage 2 web_config.json
const designTokens = {
  colors: {
    primary: {
      50: "#f7f6fd",
      100: "#efeefb",
      200: "#dfddf7",
      300: "#cfccf4",
      400: "#c0bbf0",
      500: "#6257db", // Main primary color
      600: "#584ec5",
      700: "#4e45af",
      800: "#443c99",
      900: "#3a3483",
      950: "#312b6d"
    },
    success: {
      50: "#f4fbf5",
      100: "#e9f7ec",
      200: "#d4f0da",
      300: "#bee8c7",
      400: "#a9e1b5",
      500: "#28b446", // Main success color
      600: "#24a23f",
      700: "#209038",
      800: "#1c7d31",
      900: "#186c2a",
      950: "#145a23"
    },
    warning: {
      50: "#fefbf2",
      100: "#fef8e5",
      200: "#fef1cc",
      300: "#fdeab2",
      400: "#fde399",
      500: "#fbbb00", // Main warning color
      600: "#e1a800",
      700: "#c89500",
      800: "#af8200",
      900: "#967000",
      950: "#7d5d00"
    },
    error: {
      50: "#fef2f2",
      100: "#fee2e2",
      200: "#fecaca",
      300: "#fca5a5",
      400: "#f87171",
      500: "#ef4444", // Main error color
      600: "#dc2626",
      700: "#b91c1c",
      800: "#991b1b",
      900: "#7f1d1d",
      950: "#450a0a"
    },    background: "#ffffff",
    foreground: "#1a1a1a",
    muted: {
      DEFAULT: "#f5f5f5",
      foreground: "#737373"
    },
    border: "#e5e5e5",
    card: "#ffffff",
    popover: "#ffffff"
  },
  spacing: {
    "0": "0px",
    "1": "4px",
    "2": "8px",
    "3": "13px",
    "4": "16px",
    "6": "22px",
    "8": "32px"
  },
  borderRadius: {
    sm: "2px",
    md: "4px",
    lg: "8px",
    xl: "12px"
  },}// Button variants using CVA with design tokens
const forgotpasswordVariants = cva(
  // Base classes
  "React.HTMLAttributes<HTMLDivElement>",
  {
    variants: {      variant: {
        primary: `
          bg-[${designTokens.colors.primary[500]}]
          text-white
          hover:bg-[${designTokens.colors.primary[600]}]
          focus:ring-[${designTokens.colors.primary[500]}]
        `,
        secondary: `
          bg-[${designTokens.colors.background}]
          text-[${designTokens.colors.foreground}]
          border-[${designTokens.colors.border}]
          hover:bg-[${designTokens.colors.muted.DEFAULT}]
        `,
        outline: `
          bg-transparent
          text-[${designTokens.colors.primary[500]}]
          border-[${designTokens.colors.primary[500]}]
          hover:bg-[${designTokens.colors.primary[50]}]
        `,
        ghost: `
          bg-transparent
          text-[${designTokens.colors.foreground}]
          hover:bg-[${designTokens.colors.muted.DEFAULT}]
        `,
        success: `
          bg-[${designTokens.colors.success[500]}]
          text-white
          hover:bg-[${designTokens.colors.success[600]}]
        `,
        warning: `
          bg-[${designTokens.colors.warning[500]}]
          text-white
          hover:bg-[${designTokens.colors.warning[600]}]
        `,
        destructive: `
          bg-[${designTokens.colors.error[500]}]
          text-white
          hover:bg-[${designTokens.colors.error[600]}]
        `
      },
      size: {
        sm: "h-8 px-3 text-xs",
        md: "h-10 px-4 py-2 text-sm",
        lg: "h-12 px-6 text-base"
      }    },
    defaultVariants: {      variant: "primary",
      size: "md"    }
  }
)
// Export Button props interface matching Stage 2 ForgotPassword component
export interface ButtonProps extends  React.HTMLAttributes<HTMLDivElement>,  VariantProps<typeof forgotpasswordVariants> {
  // Stage 2 Bg component interface
  width?: string | number
  height?: string | number
  position?: { x?: number; y?: number }
  backgroundColor?: string
  backgroundOpacity?: number
  borderRadius?: string | number
  display?: "block" | "inline" | "inline-block" | "flex" | "grid" | "none"
  overflow?: "visible" | "hidden" | "scroll" | "auto"
  style?: React.CSSProperties
  children?: React.ReactNode
  id?: string
  testId?: string  // Enhanced button specific props
  variant?: "primary" | "secondary" | "outline" | "ghost" | "success" | "warning" | "destructive"
  size?: "sm" | "md" | "lg"
  disabled?: boolean
  loading?: boolean
  onClick?: (event: React.MouseEvent) => void
  type?: "button" | "submit" | "reset"}// Loading spinner component
const LoadingSpinner = () => (
  <svg
    className="animate-spin h-4 w-4 text-current opacity-70"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    />
  </svg>
)
// Main Button component
const Button = React.forwardRef<  HTMLDivElement,
  ButtonProps
>(
  ({   className,
  variant,
  size,  width,
  height,
  position,
  backgroundColor,
  backgroundOpacity,
  borderRadius,
  display,
  overflow,
  style,
  children,
  id,
  testId,  disabled = false,
  loading = false,
  onClick,
  type = "button",  ...props }, ref) => {  // No additional state needed for basic button  // No additional handlers needed for basic button
    // Combine inline styles
    const inlineStyles: React.CSSProperties = {
      ...style,
      ...(width && { width: typeof width === 'number' ? `${width}px` : width }),
      ...(height && { height: typeof height === 'number' ? `${height}px` : height }),
      ...(backgroundColor && {
        backgroundColor,
        opacity: backgroundOpacity !== undefined ? backgroundOpacity : 1
      }),      ...(borderRadius && { borderRadius: typeof borderRadius === 'number' ? `${borderRadius}px` : borderRadius }),
      ...(display && { display }),
      ...(overflow && { overflow }),
      ...(position && {
        position: 'absolute' as const,
        left: position.x !== undefined ? `${position.x}px` : undefined,
        top: position.y !== undefined ? `${position.y}px` : undefined
      })
    }    const forgotpasswordClasses = [
      forgotpasswordVariants({   variant, size }),
      className || ''
    ].filter(Boolean).join(' ')    // Don't render if not visible
    if (!isVisible) {
      return null
    }

    return (
      <button
        ref={ref}
        className={ classesVariable }
        style={inlineStyles}
        id={id}
        data-testid={testId}
        disabled={disabled || loading}
        onClick={onClick}
        type={type}
        {...props}
      >
        {loading ? (
          <>
            <LoadingSpinner />
            {children && <span className="ml-2">{children}</span>}
          </>
        ) : (
          children
        )}
      </button>
    )  }
)

Button.displayName = "Button"export { Button, forgotpasswordVariants }