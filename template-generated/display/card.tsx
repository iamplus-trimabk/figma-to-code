/**
 * Card Component - Generated by Stage 3 Component Generator (Phase 2: Template-Driven)
 *
 * login - Visual component for displaying content
 * Design tokens integrated from Stage 2 outputs for consistent styling
 */

"use client"

import * as React from "react"

import { cva, type VariantProps } from "class-variance-authority"

// Design tokens from Stage 2 web_config.json
const designTokens = {
  colors: {
    primary: {
      50: "#f7f6fd",
      100: "#efeefb",
      200: "#dfddf7",
      300: "#cfccf4",
      400: "#c0bbf0",
      500: "#6257db", // Main primary color
      600: "#584ec5",
      700: "#4e45af",
      800: "#443c99",
      900: "#3a3483",
      950: "#312b6d"
    },
    success: {
      50: "#f4fbf5",
      100: "#e9f7ec",
      200: "#d4f0da",
      300: "#bee8c7",
      400: "#a9e1b5",
      500: "#28b446", // Main success color
      600: "#24a23f",
      700: "#209038",
      800: "#1c7d31",
      900: "#186c2a",
      950: "#145a23"
    },
    warning: {
      50: "#fefbf2",
      100: "#fef8e5",
      200: "#fef1cc",
      300: "#fdeab2",
      400: "#fde399",
      500: "#fbbb00", // Main warning color
      600: "#e1a800",
      700: "#c89500",
      800: "#af8200",
      900: "#967000",
      950: "#7d5d00"
    },
    error: {
      50: "#fef2f2",
      100: "#fee2e2",
      200: "#fecaca",
      300: "#fca5a5",
      400: "#f87171",
      500: "#ef4444", // Main error color
      600: "#dc2626",
      700: "#b91c1c",
      800: "#991b1b",
      900: "#7f1d1d",
      950: "#450a0a"
    },    background: "#ffffff",
    foreground: "#1a1a1a",
    muted: {
      DEFAULT: "#f5f5f5",
      foreground: "#737373"
    },
    border: "#e5e5e5",
    card: "#ffffff",
    popover: "#ffffff"
  },
  spacing: {
    "0": "0px",
    "1": "4px",
    "2": "8px",
    "3": "13px",
    "4": "16px",
    "6": "22px",
    "8": "32px"
  },
  borderRadius: {
    sm: "2px",
    md: "4px",
    lg: "8px",
    xl: "12px"
  },  effects: {
    shadow: {
      sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
      md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
      lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)"
    }
  },}// Card variants using CVA with design tokens
const loginVariants = cva(
  // Base classes
  "React.HTMLAttributes<HTMLDivElement>",
  {
    variants: {      variant: {
        default: `
          bg-[${designTokens.colors.card}]
          border-[${designTokens.colors.border}]
        `,
        elevated: `
          bg-[${designTokens.colors.card}]
          border-[${designTokens.colors.border}]
          shadow-[${designTokens.effects.shadow.md}]
          hover:shadow-[${designTokens.effects.shadow.lg}]
          transition-shadow duration-200
        `,
        outlined: `
          bg-[${designTokens.colors.card}]
          border-2 border-[${designTokens.colors.primary[500]}]
        `,
        filled: `
          bg-[${designTokens.colors.primary[50]}]
          border-[${designTokens.colors.primary[200]}]
        `,
        success: `
          bg-[${designTokens.colors.success[50]}]
          border-[${designTokens.colors.success[200]}]
        `,
        warning: `
          bg-[${designTokens.colors.warning[50]}]
          border-[${designTokens.colors.warning[200]}]
        `,
        error: `
          bg-[${designTokens.colors.error[50]}]
          border-[${designTokens.colors.error[200]}]
        `,
        ghost: `
          bg-transparent
          border-[${designTokens.colors.border}]
        `
      },
      size: {
        sm: "p-3",
        md: "p-4",
        lg: "p-6",
        xl: "p-8"
      },
      layout: {
        default: "flex flex-col space-y-4",
        horizontal: "flex flex-row space-x-4",
        stacked: "flex flex-col space-y-2",
        grid: "grid grid-cols-1 gap-4"
      }    },
    defaultVariants: {      variant: "default",
      size: "md",
      layout: "default"    }
  }
)
// Export Card props interface matching Stage 2 Login component
export interface CardProps extends  React.HTMLAttributes<HTMLDivElement>,  VariantProps<typeof loginVariants> {
  // Stage 2 Bg component interface
  width?: string | number
  height?: string | number
  position?: { x?: number; y?: number }
  backgroundColor?: string
  backgroundOpacity?: number
  borderRadius?: string | number
  display?: "block" | "inline" | "inline-block" | "flex" | "grid" | "none"
  overflow?: "visible" | "hidden" | "scroll" | "auto"
  style?: React.CSSProperties
  children?: React.ReactNode
  id?: string
  testId?: string  // Enhanced card specific props
  variant?: "default" | "elevated" | "outlined" | "filled" | "success" | "warning" | "error" | "ghost"
  size?: "sm" | "md" | "lg" | "xl"
  layout?: "default" | "horizontal" | "stacked" | "grid"
  header?: React.ReactNode
  footer?: React.ReactNode
  title?: string
  description?: string
  actions?: React.ReactNode
  image?: React.ReactNode
  loading?: boolean
  hoverable?: boolean
  clickable?: boolean
  onClick?: () => void}// Loading skeleton component
const CardSkeleton = () => (
  <div className="animate-pulse">
    <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
    <div className="h-3 bg-gray-200 rounded w-1/2 mb-3"></div>
    <div className="space-y-2">
      <div className="h-3 bg-gray-200 rounded"></div>
      <div className="h-3 bg-gray-200 rounded w-5/6"></div>
    </div>
  </div>
)

// Card Header component
const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & {
    title?: string
    description?: string
    actions?: React.ReactNode
  }
>(({ className, title, description, actions, children, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex flex-col space-y-1.5 ${actions ? 'justify-between sm:flex-row sm:items-center sm:space-y-0' : ''} ${className || ''}`}
    {...props}
  >
    {title && (
      <div className="space-y-1">
        <h3 className="text-lg font-semibold leading-none tracking-tight">{title}</h3>
        {description && (
          <p className="text-sm text-muted-foreground">{description}</p>
        )}
      </div>
    )}
    {children}
    {actions && <div className="flex items-center space-x-2">{actions}</div>}
  </div>
))
CardHeader.displayName = "CardHeader"

// Card Content component
const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={`pt-0 ${className || ''}`} {...props} />
))
CardContent.displayName = "CardContent"

// Card Footer component
const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex items-center pt-0 ${className || ''}`}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"
// Main Card component
const Card = React.forwardRef<  HTMLDivElement,
  CardProps
>(
  ({   className,
  variant,
  size,  layout,  width,
  height,
  position,
  backgroundColor,
  backgroundOpacity,
  borderRadius,
  display,
  overflow,
  style,
  children,
  id,
  testId,  header,
  footer,
  title,
  description,
  actions,
  image,
  loading = false,
  hoverable = false,
  clickable = false,
  onClick,  ...props }, ref) => {  const [isHovered, setIsHovered] = React.useState(false)  const handleMouseEnter = () => {
    if (hoverable) {
      setIsHovered(true)
    }
  }

  const handleMouseLeave = () => {
    setIsHovered(false)
  }

  const handleClick = () => {
    if (clickable && onClick) {
      onClick()
    }
  }
    // Combine inline styles
    const inlineStyles: React.CSSProperties = {
      ...style,
      ...(width && { width: typeof width === 'number' ? `${width}px` : width }),
      ...(height && { height: typeof height === 'number' ? `${height}px` : height }),
      ...(backgroundColor && {
        backgroundColor,
        opacity: backgroundOpacity !== undefined ? backgroundOpacity : 1
      }),      ...(borderRadius && { borderRadius: typeof borderRadius === 'number' ? `${borderRadius}px` : borderRadius }),
      ...(display && { display }),
      ...(overflow && { overflow }),
      ...(position && {
        position: 'absolute' as const,
        left: position.x !== undefined ? `${position.x}px` : undefined,
        top: position.y !== undefined ? `${position.y}px` : undefined
      })
    }    const loginClasses = [
      loginVariants({   variant, size, layout }),
      className || ''
    ].filter(Boolean).join(' ')    const cardClasses = [
      cardVariants({ variant, size, layout }),
      hoverable ? 'cursor-pointer transition-all duration-200' : '',
      clickable ? 'cursor-pointer' : '',
      hoverable && isHovered ? 'scale-[1.02] shadow-lg' : '',
      className || ''
    ].filter(Boolean).join(' ')

    const renderContent = () => {
      if (loading) {
        return <CardSkeleton />
      }

      // If header, footer, title, or image are provided, use structured layout
      if (header || footer || title || description || actions || image) {
        return (
          <>
            {image && <div className="relative">{image}</div>}

            {(header || title || description || actions) && (
              <CardHeader title={title} description={description} actions={actions}>
                {header}
              </CardHeader>
            )}

            <CardContent className={layout === 'default' ? 'flex-1' : ''}>
              {children}
            </CardContent>

            {footer && <CardFooter>{footer}</CardFooter>}
          </>
        )
      }

      // Otherwise, render children directly
      return <>{children}</>
    }

    return (
      <div
        ref={ref}
        className={cardClasses}
        style={inlineStyles}
        id={id}
        data-testid={testId}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        onClick={handleClick}
        role={clickable ? 'button' : undefined}
        tabIndex={clickable ? 0 : undefined}
        onKeyDown={(e) => {
          if (clickable && (e.key === 'Enter' || e.key === ' ')) {
            e.preventDefault()
            onClick?.()
          }
        }}
        aria-label={clickable ? title : undefined}
        {...props}
      >
        {renderContent()}
      </div>
    )  }
)

Card.displayName = "Card"export { Card, loginVariants }