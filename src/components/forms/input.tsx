/**
 * Input Component - Generated by Stage 3 Component Generator (Phase 1: Prompt-Driven)
 *
 * Interactive UI component with user interactions, implementing interfaces from Stage 2 Email, Password, Search components
 * Design tokens integrated from Stage 2 outputs for consistent styling
 */

"use client"

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

// Design tokens from Stage 2 web_config.json
const designTokens = {
  colors: {
    primary: {
      50: "#f7f6fd",
      100: "#efeefb",
      200: "#dfddf7",
      300: "#cfccf4",
      400: "#c0bbf0",
      500: "#6257db", // Main primary color
      600: "#584ec5",
      700: "#4e45af",
      800: "#443c99",
      900: "#3a3483",
      950: "#312b6d"
    },
    success: {
      50: "#f4fbf5",
      100: "#e9f7ec",
      200: "#d4f0da",
      300: "#bee8c7",
      400: "#a9e1b5",
      500: "#28b446", // Main success color
      600: "#24a23f",
      700: "#209038",
      800: "#1c7d31",
      900: "#186c2a",
      950: "#145a23"
    },
    warning: {
      50: "#fefbf2",
      100: "#fef8e5",
      200: "#fef1cc",
      300: "#fdeab2",
      400: "#fde399",
      500: "#fbbb00", // Main warning color
      600: "#e1a800",
      700: "#c89500",
      800: "#af8200",
      900: "#967000",
      950: "#7d5d00"
    },
    error: {
      50: "#fef2f2",
      100: "#fee2e2",
      200: "#fecaca",
      300: "#fca5a5",
      400: "#f87171",
      500: "#ef4444", // Main error color
      600: "#dc2626",
      700: "#b91c1c",
      800: "#991b1b",
      900: "#7f1d1d",
      950: "#450a0a"
    },
    background: "#ffffff",
    foreground: "#1a1a1a",
    muted: {
      DEFAULT: "#f5f5f5",
      foreground: "#737373"
    },
    border: "#e5e5e5",
    input: "#e5e5e5",
    ring: "#6257db",
    placeholder: "#9ca3af"
  },
  spacing: {
    "0": "0px",
    "1": "4px",
    "2": "8px",
    "3": "13px",
    "4": "16px",
    "6": "22px",
    "8": "32px"
  },
  borderRadius: {
    sm: "2px",
    md: "4px",
    lg: "8px",
    xl: "12px"
  },
  typography: {
    fontFamily: ["Poppins", "sans-serif"],
    fontSize: {
      xs: "12px",
      sm: "14px",
      base: "16px",
      lg: "18px"
    },
    fontWeight: {
      regular: "400",
      medium: "500",
      semibold: "600"
    }
  }
}

// Input variants using CVA with design tokens
const inputVariants = cva(
  // Base classes
  "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
  {
    variants: {
      variant: {
        default: `
          border-[${designTokens.colors.border}]
          focus-visible:border-[${designTokens.colors.primary[500]}]
          focus-visible:ring-[${designTokens.colors.primary[500]}]
        `,
        error: `
          border-[${designTokens.colors.error[500]}]
          focus-visible:border-[${designTokens.colors.error[500]}]
          focus-visible:ring-[${designTokens.colors.error[500]}]
        `,
        success: `
          border-[${designTokens.colors.success[500]}]
          focus-visible:border-[${designTokens.colors.success[500]}]
          focus-visible:ring-[${designTokens.colors.success[500]}]
        `,
        warning: `
          border-[${designTokens.colors.warning[500]}]
          focus-visible:border-[${designTokens.colors.warning[500]}]
          focus-visible:ring-[${designTokens.colors.warning[500]}]
        `
      },
      size: {
        sm: `h-8 px-2 text-xs`,
        md: `h-10 px-3 text-sm`,
        lg: `h-12 px-4 text-base`
      },
      inputType: {
        text: "",
        email: "",
        password: "",
        search: "",
        number: "",
        tel: "",
        url: ""
      }
    },
    defaultVariants: {
      variant: "default",
      size: "md",
      inputType: "text"
    }
  }
)

// Export Input props interface matching Stage 2 Email component
export interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'onChange'>, VariantProps<typeof inputVariants> {
  width?: string | number
  height?: string | number
  position?: { x?: number; y?: number }
  backgroundColor?: string
  backgroundOpacity?: number
  fontFamily?: string
  fontSize?: string | number
  fontWeight?: string | number
  textAlign?: "left" | "center" | "right" | "justify"
  style?: React.CSSProperties
  children?: React.ReactNode
  id?: string
  testId?: string
  interactive?: boolean
  hover?: boolean
  focus?: boolean
  active?: boolean
  onPress?: () => void
  onHover?: (hovering: boolean) => void
  // Enhanced input specific props
  label?: string
  error?: string
  helperText?: string
  required?: boolean
  disabled?: boolean
  loading?: boolean
  leftIcon?: React.ReactNode
  rightIcon?: React.ReactNode
  startAdornment?: React.ReactNode
  endAdornment?: React.ReactNode
  type?: "text" | "email" | "password" | "search" | "number" | "tel" | "url"
  placeholder?: string
  value?: string
  defaultValue?: string
  onChange?: (value: string) => void
  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void
  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void
}

// Loading spinner component
const LoadingSpinner = () => (
  <svg
    className="animate-spin h-4 w-4 text-muted-foreground"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    />
  </svg>
)

// Main Input component
const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({
    className,
    variant,
    size,
    inputType,
    width,
    height,
    position,
    backgroundColor,
    backgroundOpacity,
    fontFamily,
    fontSize,
    fontWeight,
    textAlign,
    style,
    children,
    id,
    testId,
    interactive = true,
    hover,
    focus,
    active,
    onPress,
    onHover,
    label,
    error,
    helperText,
    required = false,
    disabled = false,
    loading = false,
    leftIcon,
    rightIcon,
    startAdornment,
    endAdornment,
    type = "text",
    placeholder,
    value,
    defaultValue,
    onChange,
    onBlur,
    onFocus,
    ...props
  }, ref) => {
    const [isHovering, setIsHovering] = React.useState(false)
    const [isFocused, setIsFocused] = React.useState(false)
    const [internalValue, setInternalValue] = React.useState(defaultValue || "")

    // Handle controlled/uncontrolled state
    const currentValue = value !== undefined ? value : internalValue

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const newValue = e.target.value

      if (value === undefined) {
        setInternalValue(newValue)
      }

      onChange?.(newValue)
    }

    const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {
      setIsFocused(true)
      onFocus?.(e)
    }

    const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
      setIsFocused(false)
      onBlur?.(e)
    }

    const handleMouseEnter = () => {
      setIsHovering(true)
      onHover?.(true)
    }

    const handleMouseLeave = () => {
      setIsHovering(false)
      onHover?.(false)
    }

    const handlePress = () => {
      if (interactive && !disabled && !loading) {
        onPress?.()
      }
    }

    // Determine effective variant
    const effectiveVariant = error ? "error" : variant

    // Combine inline styles
    const inlineStyles: React.CSSProperties = {
      ...style,
      ...(width && { width: typeof width === 'number' ? `${width}px` : width }),
      ...(height && { height: typeof height === 'number' ? `${height}px` : height }),
      ...(backgroundColor && {
        backgroundColor,
        opacity: backgroundOpacity !== undefined ? backgroundOpacity : 1
      }),
      ...(fontFamily && { fontFamily }),
      ...(fontSize && { fontSize: typeof fontSize === 'number' ? `${fontSize}px` : fontSize }),
      ...(fontWeight && { fontWeight }),
      ...(textAlign && { textAlign }),
      ...(position && {
        position: 'absolute' as const,
        left: position.x !== undefined ? `${position.x}px` : undefined,
        top: position.y !== undefined ? `${position.y}px` : undefined
      })
    }

    const inputElement = (
      <input
        type={type}
        className={inputVariants({ variant: effectiveVariant, size, className })}
        style={inlineStyles}
        ref={ref}
        id={id}
        data-testid={testId}
        disabled={disabled || loading}
        value={currentValue}
        placeholder={placeholder}
        onChange={handleInputChange}
        onFocus={handleFocus}
        onBlur={handleBlur}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        onClick={handlePress}
        aria-required={required}
        aria-invalid={error ? 'true' : undefined}
        aria-describedby={
          error ? `${id}-error` :
          helperText ? `${id}-helper` :
          undefined
        }
        {...props}
      />
    )

    const renderInput = () => {
      // If there are adornments, render with wrapper
      if (startAdornment || endAdornment || leftIcon || rightIcon || loading) {
        return (
          <div className="flex items-center w-full relative">
            {startAdornment && (
              <div className="absolute left-3 flex items-center pointer-events-none">
                {startAdornment}
              </div>
            )}
            {leftIcon && (
              <div className="absolute left-3 flex items-center pointer-events-none">
                {leftIcon}
              </div>
            )}

            <input
              type={type}
              className={inputVariants({
                variant: effectiveVariant,
                size,
                className: `${startAdornment || leftIcon ? 'pl-10' : ''} ${endAdornment || rightIcon || loading ? 'pr-10' : ''} ${className || ''}`
              })}
              style={inlineStyles}
              ref={ref}
              id={id}
              data-testid={testId}
              disabled={disabled || loading}
              value={currentValue}
              placeholder={placeholder}
              onChange={handleInputChange}
              onFocus={handleFocus}
              onBlur={handleBlur}
              onMouseEnter={handleMouseEnter}
              onMouseLeave={handleMouseLeave}
              onClick={handlePress}
              aria-required={required}
              aria-invalid={error ? 'true' : undefined}
              aria-describedby={
                error ? `${id}-error` :
                helperText ? `${id}-helper` :
                undefined
              }
              {...props}
            />

            {endAdornment && (
              <div className="absolute right-3 flex items-center pointer-events-none">
                {endAdornment}
              </div>
            )}
            {rightIcon && (
              <div className="absolute right-3 flex items-center pointer-events-none">
                {rightIcon}
              </div>
            )}
            {loading && (
              <div className="absolute right-3 flex items-center pointer-events-none">
                <LoadingSpinner />
              </div>
            )}
          </div>
        )
      }

      return inputElement
    }

    // If there's a label, render with label wrapper
    if (label) {
      return (
        <div className="space-y-2">
          <label
            htmlFor={id}
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            style={{
              fontFamily: fontFamily || designTokens.typography.fontFamily.join(', '),
              fontSize: fontSize || designTokens.typography.fontSize.sm,
              fontWeight: fontWeight || designTokens.typography.fontWeight.medium
            }}
          >
            {label}
            {required && <span className="text-red-500 ml-1">*</span>}
          </label>

          {renderInput()}

          {error && (
            <p id={`${id}-error`} className="text-sm text-red-500" role="alert">
              {error}
            </p>
          )}

          {helperText && !error && (
            <p id={`${id}-helper`} className="text-sm text-muted-foreground">
              {helperText}
            </p>
          )}
        </div>
      )
    }

    return (
      <div className="space-y-2">
        {renderInput()}

        {error && (
          <p id={`${id}-error`} className="text-sm text-red-500" role="alert">
            {error}
          </p>
        )}

        {helperText && !error && (
          <p id={`${id}-helper`} className="text-sm text-muted-foreground">
            {helperText}
          </p>
        )}
      </div>
    )
  }
)

Input.displayName = "Input"

export { Input, inputVariants }