/**
 * Alert Component - Generated by Stage 3 Component Generator (Phase 1: Prompt-Driven)
 *
 * Feedback component for displaying notifications and alerts, implementing interface from Stage 2 Bg component
 * Design tokens integrated from Stage 2 outputs for consistent styling
 */

"use client"

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

// Design tokens from Stage 2 web_config.json
const designTokens = {
  colors: {
    primary: {
      50: "#f7f6fd",
      100: "#efeefb",
      200: "#dfddf7",
      300: "#cfccf4",
      400: "#c0bbf0",
      500: "#6257db", // Main primary color
      600: "#584ec5",
      700: "#4e45af",
      800: "#443c99",
      900: "#3a3483",
      950: "#312b6d"
    },
    success: {
      50: "#f4fbf5",
      100: "#e9f7ec",
      200: "#d4f0da",
      300: "#bee8c7",
      400: "#a9e1b5",
      500: "#28b446", // Main success color
      600: "#24a23f",
      700: "#209038",
      800: "#1c7d31",
      900: "#186c2a",
      950: "#145a23"
    },
    warning: {
      50: "#fefbf2",
      100: "#fef8e5",
      200: "#fef1cc",
      300: "#fdeab2",
      400: "#fde399",
      500: "#fbbb00", // Main warning color
      600: "#e1a800",
      700: "#c89500",
      800: "#af8200",
      900: "#967000",
      950: "#7d5d00"
    },
    error: {
      50: "#fef2f2",
      100: "#fee2e2",
      200: "#fecaca",
      300: "#fca5a5",
      400: "#f87171",
      500: "#ef4444", // Main error color
      600: "#dc2626",
      700: "#b91c1c",
      800: "#991b1b",
      900: "#7f1d1d",
      950: "#450a0a"
    },
    info: {
      50: "#f0f9ff",
      100: "#e0f2fe",
      200: "#bae6fd",
      300: "#7dd3fc",
      400: "#38bdf8",
      500: "#0ea5e9", // Main info color
      600: "#0284c7",
      700: "#0369a1",
      800: "#075985",
      900: "#0c4a6e",
      950: "#082f49"
    },
    background: "#ffffff",
    foreground: "#1a1a1a",
    muted: {
      DEFAULT: "#f5f5f5",
      foreground: "#737373"
    },
    border: "#e5e5e5",
    card: "#ffffff",
    popover: "#ffffff"
  },
  spacing: {
    "0": "0px",
    "1": "4px",
    "2": "8px",
    "3": "13px",
    "4": "16px",
    "6": "22px",
    "8": "32px"
  },
  borderRadius: {
    sm: "2px",
    md: "4px",
    lg: "8px",
    xl: "12px"
  },
  effects: {
    shadow: {
      sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
      md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
      lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)"
    }
  },
  typography: {
    fontFamily: ["Poppins", "sans-serif"],
    fontSize: {
      xs: "12px",
      sm: "14px",
      base: "16px",
      lg: "18px"
    },
    fontWeight: {
      regular: "400",
      medium: "500",
      semibold: "600"
    }
  }
}

// Alert variants using CVA with design tokens
const alertVariants = cva(
  // Base classes
  "relative w-full rounded-lg border p-4",
  {
    variants: {
      variant: {
        default: `
          bg-[${designTokens.colors.background}]
          border-[${designTokens.colors.border}]
          text-[${designTokens.colors.foreground}]
        `,
        info: `
          bg-[${designTokens.colors.info[50]}]
          border-[${designTokens.colors.info[200]}]
          text-[${designTokens.colors.info[800]}]
        `,
        success: `
          bg-[${designTokens.colors.success[50]}]
          border-[${designTokens.colors.success[200]}]
          text-[${designTokens.colors.success[800]}]
        `,
        warning: `
          bg-[${designTokens.colors.warning[50]}]
          border-[${designTokens.colors.warning[200]}]
          text-[${designTokens.colors.warning[800]}]
        `,
        error: `
          bg-[${designTokens.colors.error[50]}]
          border-[${designTokens.colors.error[200]}]
          text-[${designTokens.colors.error[800]}]
        `
      },
      size: {
        sm: "p-3 text-sm",
        md: "p-4 text-sm",
        lg: "p-6 text-base"
      },
      dismissible: {
        true: "pr-12", // Add extra padding for dismiss button
        false: ""
      }
    },
    defaultVariants: {
      variant: "default",
      size: "md",
      dismissible: false
    }
  }
)

// Export Alert props interface matching Stage 2 Bg component
export interface AlertProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof alertVariants> {
  width?: string | number
  height?: string | number
  position?: { x?: number; y?: number }
  backgroundColor?: string
  backgroundOpacity?: number
  borderRadius?: string | number
  display?: "block" | "inline" | "inline-block" | "flex" | "grid" | "none"
  overflow?: "visible" | "hidden" | "scroll" | "auto"
  style?: React.CSSProperties
  children?: React.ReactNode
  id?: string
  testId?: string
  // Enhanced alert specific props
  title?: string
  description?: string
  icon?: React.ReactNode
  dismissible?: boolean
  onDismiss?: () => void
  action?: React.ReactNode
  visible?: boolean
  autoHide?: boolean
  autoHideDelay?: number
}

// Icon components for different alert types
const AlertIcons = {
  default: (
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
  ),
  info: (
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
  ),
  success: (
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
  ),
  warning: (
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
    </svg>
  ),
  error: (
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
  )
}

// Dismiss button component
const DismissButton = ({ onDismiss }: { onDismiss: () => void }) => (
  <button
    onClick={onDismiss}
    className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
    aria-label="Dismiss alert"
  >
    <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>
)

// Main Alert component
const Alert = React.forwardRef<HTMLDivElement, AlertProps>(
  ({
    className,
    variant,
    size,
    dismissible,
    width,
    height,
    position,
    backgroundColor,
    backgroundOpacity,
    borderRadius,
    display,
    overflow,
    style,
    children,
    id,
    testId,
    title,
    description,
    icon,
    onDismiss,
    action,
    visible = true,
    autoHide = false,
    autoHideDelay = 5000,
    ...props
  }, ref) => {
    const [isVisible, setIsVisible] = React.useState(visible)

    // Handle auto-hide functionality
    React.useEffect(() => {
      if (autoHide && visible) {
        const timer = setTimeout(() => {
          setIsVisible(false)
          onDismiss?.()
        }, autoHideDelay)

        return () => clearTimeout(timer)
      }
    }, [autoHide, visible, autoHideDelay, onDismiss])

    // Handle visibility prop changes
    React.useEffect(() => {
      setIsVisible(visible)
    }, [visible])

    const handleDismiss = () => {
      setIsVisible(false)
      onDismiss?.()
    }

    // Get default icon based on variant
    const defaultIcon = React.useMemo(() => {
      if (variant) {
        return AlertIcons[variant as keyof typeof AlertIcons] || AlertIcons.default
      }
      return AlertIcons.default
    }, [variant])

    // Combine inline styles
    const inlineStyles: React.CSSProperties = {
      ...style,
      ...(width && { width: typeof width === 'number' ? `${width}px` : width }),
      ...(height && { height: typeof height === 'number' ? `${height}px` : height }),
      ...(backgroundColor && {
        backgroundColor,
        opacity: backgroundOpacity !== undefined ? backgroundOpacity : 1
      }),
      ...(borderRadius && { borderRadius: typeof borderRadius === 'number' ? `${borderRadius}px` : borderRadius }),
      ...(display && { display }),
      ...(overflow && { overflow }),
      ...(position && {
        position: 'absolute' as const,
        left: position.x !== undefined ? `${position.x}px` : undefined,
        top: position.y !== undefined ? `${position.y}px` : undefined
      })
    }

    // Don't render if not visible
    if (!isVisible) {
      return null
    }

    const alertClasses = [
      alertVariants({ variant, size, dismissible }),
      className || ''
    ].filter(Boolean).join(' ')

    return (
      <div
        ref={ref}
        className={alertClasses}
        style={inlineStyles}
        id={id}
        data-testid={testId}
        role="alert"
        aria-live={variant === 'error' ? 'assertive' : 'polite'}
        {...props}
      >
        {/* Icon section */}
        {(icon !== undefined || defaultIcon) && (
          <div className="flex items-start gap-3">
            {icon || defaultIcon}
            <div className="flex-1 min-w-0">
              {/* Title section */}
              {title && (
                <h4 className="font-semibold mb-1" style={{
                  fontFamily: designTokens.typography.fontFamily.join(', '),
                  fontSize: size === 'lg' ? designTokens.typography.fontSize.lg : designTokens.typography.fontSize.base,
                  fontWeight: designTokens.typography.fontWeight.semibold
                }}>
                  {title}
                </h4>
              )}

              {/* Description section */}
              {description && (
                <p className="text-sm mb-2" style={{
                  fontFamily: designTokens.typography.fontFamily.join(', '),
                  fontSize: designTokens.typography.fontSize.sm,
                  fontWeight: designTokens.typography.fontWeight.regular,
                  opacity: 0.8
                }}>
                  {description}
                </p>
              )}

              {/* Children content */}
              {children && (
                <div className="text-sm">
                  {children}
                </div>
              )}

              {/* Action section */}
              {action && (
                <div className="mt-3">
                  {action}
                </div>
              )}
            </div>
          </div>
        )}

        {/* No icon layout */}
        {icon === undefined && !defaultIcon && (
          <div>
            {/* Title section */}
            {title && (
              <h4 className="font-semibold mb-1" style={{
                fontFamily: designTokens.typography.fontFamily.join(', '),
                fontSize: size === 'lg' ? designTokens.typography.fontSize.lg : designTokens.typography.fontSize.base,
                fontWeight: designTokens.typography.fontWeight.semibold
              }}>
                {title}
              </h4>
            )}

            {/* Description section */}
            {description && (
              <p className="text-sm mb-2" style={{
                fontFamily: designTokens.typography.fontFamily.join(', '),
                fontSize: designTokens.typography.fontSize.sm,
                fontWeight: designTokens.typography.fontWeight.regular,
                opacity: 0.8
              }}>
                {description}
              </p>
            )}

            {/* Children content */}
            {children && (
              <div className="text-sm">
                {children}
              </div>
            )}

            {/* Action section */}
            {action && (
              <div className="mt-3">
                {action}
              </div>
            )}
          </div>
        )}

        {/* Dismiss button */}
        {dismissible && onDismiss && (
          <DismissButton onDismiss={handleDismiss} />
        )}
      </div>
    )
  }
)

Alert.displayName = "Alert"

export { Alert, alertVariants }