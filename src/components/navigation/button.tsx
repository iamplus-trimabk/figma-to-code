/**
 * Button Component - Generated by Stage 3 Component Generator (Phase 1: Prompt-Driven)
 *
 * Interactive UI component with user interactions, implementing the exact interface from Stage 2
 * Design tokens integrated from Stage 2 outputs for consistent styling
 */

"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

// Design tokens from Stage 2 web_config.json
const designTokens = {
  colors: {
    primary: {
      50: "#f7f6fd",
      100: "#efeefb",
      200: "#dfddf7",
      300: "#cfccf4",
      400: "#c0bbf0",
      500: "#6257db", // Main primary color
      600: "#584ec5",
      700: "#4e45af",
      800: "#443c99",
      900: "#3a3483",
      950: "#312b6d"
    },
    success: {
      50: "#f4fbf5",
      100: "#e9f7ec",
      200: "#d4f0da",
      300: "#bee8c7",
      400: "#a9e1b5",
      500: "#28b446", // Main success color
      600: "#24a23f",
      700: "#209038",
      800: "#1c7d31",
      900: "#186c2a",
      950: "#145a23"
    },
    warning: {
      50: "#fefbf2",
      100: "#fef8e5",
      200: "#fef1cc",
      300: "#fdeab2",
      400: "#fde399",
      500: "#fbbb00", // Main warning color
      600: "#e1a800",
      700: "#c89500",
      800: "#af8200",
      900: "#967000",
      950: "#7d5d00"
    },
    background: "#ffffff",
    foreground: "#1a1a1a",
    muted: {
      DEFAULT: "#f5f5f5",
      foreground: "#737373"
    },
    border: "#e5e5e5",
    input: "#e5e5e5",
    ring: "#6257db"
  },
  spacing: {
    "0": "0px",
    "1": "4px",
    "2": "8px",
    "3": "13px",
    "4": "16px",
    "6": "22px",
    "8": "32px"
  },
  borderRadius: {
    sm: "2px",
    md: "4px",
    lg: "8px",
    xl: "12px"
  },
  typography: {
    fontFamily: ["Poppins", "sans-serif"],
    fontSize: {
      xs: "12px",
      sm: "14px",
      base: "16px",
      lg: "18px"
    },
    fontWeight: {
      medium: "500",
      semibold: "600"
    }
  }
}

// Button variants using CVA with design tokens
const buttonVariants = cva(
  // Base classes
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        primary: `
          bg-[${designTokens.colors.primary[500]}]
          text-white
          hover:bg-[${designTokens.colors.primary[600]}]
          focus-visible:ring-[${designTokens.colors.primary[500]}]
        `,
        secondary: `
          bg-[${designTokens.colors.muted.DEFAULT}]
          text-[${designTokens.colors.muted.foreground}]
          hover:bg-[${designTokens.colors.muted.foreground}]/10
        `,
        outline: `
          border border-[${designTokens.colors.input}]
          bg-background
          hover:bg-accent hover:text-accent-foreground
        `,
        ghost: `
          hover:bg-accent hover:text-accent-foreground
        `,
        success: `
          bg-[${designTokens.colors.success[500]}]
          text-white
          hover:bg-[${designTokens.colors.success[600]}]
          focus-visible:ring-[${designTokens.colors.success[500]}]
        `,
        warning: `
          bg-[${designTokens.colors.warning[500]}]
          text-white
          hover:bg-[${designTokens.colors.warning[600]}]
          focus-visible:ring-[${designTokens.colors.warning[500]}]
        `,
        destructive: `
          bg-red-500
          text-white
          hover:bg-red-600
          focus-visible:ring-red-500
        `
      },
      size: {
        sm: `h-8 rounded-md px-3 text-xs`,
        md: `h-10 rounded-md px-4 py-2`,
        lg: `h-12 rounded-lg px-6 text-base`
      },
      // Width variants from Stage 2
      width: {
        auto: "w-auto",
        full: "w-full",
        fit: "w-fit"
      }
    },
    defaultVariants: {
      variant: "primary",
      size: "md",
      width: "auto"
    }
  }
)

// Export Button props interface matching Stage 2 exactly
export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, Omit<VariantProps<typeof buttonVariants>, 'width'> {
  width?: string | number
  height?: string | number
  position?: { x?: number; y?: number }
  borderRadius?: string | number
  style?: React.CSSProperties
  children: React.ReactNode
  id?: string
  testId?: string
  variant?: "primary" | "secondary" | "outline" | "ghost" | "success" | "warning" | "destructive"
  size?: "sm" | "md" | "lg"
  disabled?: boolean
  loading?: boolean
  onClick?: (event: React.MouseEvent) => void
  type?: "button" | "submit" | "reset"
  asChild?: boolean
}

// Loading spinner component
const LoadingSpinner = () => (
  <svg
    className="animate-spin"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    />
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    />
  </svg>
)

// Main Button component
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({
    className,
    variant,
    size,
    width,
    height,
    position,
    borderRadius,
    style,
    children,
    id,
    testId,
    disabled = false,
    loading = false,
    onClick,
    type = "button",
    asChild = false,
    ...props
  }, ref) => {
    const Comp = asChild ? Slot : "button"

    // Combine inline styles for custom dimensions
    const inlineStyles: React.CSSProperties = {
      ...style,
      ...(width && { width: typeof width === 'number' ? `${width}px` : width }),
      ...(height && { height: typeof height === 'number' ? `${height}px` : height }),
      ...(position && {
        position: 'absolute' as const,
        left: position.x !== undefined ? `${position.x}px` : undefined,
        top: position.y !== undefined ? `${position.y}px` : undefined
      }),
      ...(borderRadius && { borderRadius: typeof borderRadius === 'number' ? `${borderRadius}px` : borderRadius })
    }

    return (
      <Comp
        className={buttonVariants({ variant, size, className })}
        style={inlineStyles}
        ref={ref}
        id={id}
        data-testid={testId}
        disabled={disabled || loading}
        onClick={onClick}
        type={type}
        aria-disabled={disabled || loading}
        aria-busy={loading}
        {...props}
      >
        {loading && <LoadingSpinner />}
        {children}
      </Comp>
    )
  }
)

Button.displayName = "Button"

export { Button, buttonVariants }