/**
 * {{ component_name }} Component - Generated by Stage 3 Component Generator (Phase 2: Template-Driven)
 *
 * {{ component_config.description }}
 * Design tokens integrated from Stage 2 outputs for consistent styling
 */

"use client"

import * as React from "react"

{% if uses_cva %}
import { cva, type VariantProps } from "class-variance-authority"
{% endif %}

// Design tokens from Stage 2 web_config.json
const designTokens = {
  colors: {
    primary: {
      50: "#f7f6fd",
      100: "#efeefb",
      200: "#dfddf7",
      300: "#cfccf4",
      400: "#c0bbf0",
      500: "#6257db", // Main primary color
      600: "#584ec5",
      700: "#4e45af",
      800: "#443c99",
      900: "#3a3483",
      950: "#312b6d"
    },
    success: {
      50: "#f4fbf5",
      100: "#e9f7ec",
      200: "#d4f0da",
      300: "#bee8c7",
      400: "#a9e1b5",
      500: "#28b446", // Main success color
      600: "#24a23f",
      700: "#209038",
      800: "#1c7d31",
      900: "#186c2a",
      950: "#145a23"
    },
    warning: {
      50: "#fefbf2",
      100: "#fef8e5",
      200: "#fef1cc",
      300: "#fdeab2",
      400: "#fde399",
      500: "#fbbb00", // Main warning color
      600: "#e1a800",
      700: "#c89500",
      800: "#af8200",
      900: "#967000",
      950: "#7d5d00"
    },
    error: {
      50: "#fef2f2",
      100: "#fee2e2",
      200: "#fecaca",
      300: "#fca5a5",
      400: "#f87171",
      500: "#ef4444", // Main error color
      600: "#dc2626",
      700: "#b91c1c",
      800: "#991b1b",
      900: "#7f1d1d",
      950: "#450a0a"
    },
    {%- if component_config.category == 'feedback' %}
    info: {
      50: "#f0f9ff",
      100: "#e0f2fe",
      200: "#bae6fd",
      300: "#7dd3fc",
      400: "#38bdf8",
      500: "#0ea5e9", // Main info color
      600: "#0284c7",
      700: "#0369a1",
      800: "#075985",
      900: "#0c4a6e",
      950: "#082f49"
    },
    {%- endif %}
    background: "#ffffff",
    foreground: "#1a1a1a",
    muted: {
      DEFAULT: "#f5f5f5",
      foreground: "#737373"
    },
    border: "#e5e5e5",
    card: "#ffffff",
    popover: "#ffffff"
  },
  spacing: {
    "0": "0px",
    "1": "4px",
    "2": "8px",
    "3": "13px",
    "4": "16px",
    "6": "22px",
    "8": "32px"
  },
  borderRadius: {
    sm: "2px",
    md: "4px",
    lg: "8px",
    xl: "12px"
  },
  {%- if component_config.category == 'display' %}
  effects: {
    shadow: {
      sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
      md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
      lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)"
    }
  },
  {%- endif %}
  {%- if component_config.category == 'forms' or component_config.category == 'feedback' %}
  typography: {
    fontFamily: ["Poppins", "sans-serif"],
    fontSize: {
      xs: "12px",
      sm: "14px",
      base: "16px",
      lg: "18px"
    },
    fontWeight: {
      regular: "400",
      medium: "500",
      semibold: "600"
    }
  }
  {%- endif %}
}

{%- if uses_cva %}
// {{ component_name }} variants using CVA with design tokens
const {{ component_config.name | lower }}Variants = cva(
  // Base classes
  "{{ component_config.base_classes }}",
  {
    variants: {
{%- include 'partials/variants.j2' %}
    },
    defaultVariants: {
{%- include 'partials/default-variants.j2' %}
    }
  }
)
{%- endif %}

// Export {{ component_name }} props interface matching Stage 2 {{ component_config.extends_from | default('Bg') }} component
export interface {{ component_name }}Props extends
{%- if component_config.extends_from == 'Button' %}
  React.ButtonHTMLAttributes<HTMLButtonElement>
{%- elif component_config.extends_from in ['Email', 'Password', 'Search'] %}
  Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'onChange'>
{%- else %}
  React.HTMLAttributes<HTMLDivElement>
{%- endif %},
{%- if uses_cva %}
  VariantProps<typeof {{ component_config.name | lower }}Variants>
{%- endif %}
 {
  // Stage 2 Bg component interface
  width?: string | number
  height?: string | number
  position?: { x?: number; y?: number }
  backgroundColor?: string
  backgroundOpacity?: number
  borderRadius?: string | number
  display?: "block" | "inline" | "inline-block" | "flex" | "grid" | "none"
  overflow?: "visible" | "hidden" | "scroll" | "auto"
  style?: React.CSSProperties
  children?: React.ReactNode
  id?: string
  testId?: string

  {%- if component_config.extends_from in ['Email', 'Password', 'Search'] %}
  // Stage 2 {{ component_config.extends_from }} component interface
  fontFamily?: string
  fontSize?: string | number
  fontWeight?: string | number
  textAlign?: "left" | "center" | "right" | "justify"
  interactive?: boolean
  hover?: boolean
  focus?: boolean
  active?: boolean
  onPress?: () => void
  onHover?: (hovering: boolean) => void
  {%- endif %}

{%- include 'partials/component-props.j2' %}
}

{%- include 'partials/helper-components.j2' %}

// Main {{ component_name }} component
const {{ component_name }} = React.forwardRef<
{%- if component_config.extends_from == 'Button' %}
  HTMLButtonElement
{%- elif component_config.extends_from in ['Email', 'Password', 'Search'] %}
  HTMLInputElement
{%- else %}
  HTMLDivElement
{%- endif %},
  {{ component_name }}Props
>(
  ({ {% include 'partials/component-args.j2' %} }, ref) => {
{%- include 'partials/component-state.j2' %}
{%- include 'partials/component-handlers.j2' %}

    // Combine inline styles
    const inlineStyles: React.CSSProperties = {
      ...style,
      ...(width && { width: typeof width === 'number' ? `${width}px` : width }),
      ...(height && { height: typeof height === 'number' ? `${height}px` : height }),
      ...(backgroundColor && {
        backgroundColor,
        opacity: backgroundOpacity !== undefined ? backgroundOpacity : 1
      }),
{%- if component_config.extends_from in ['Email', 'Password', 'Search'] %}
      ...(fontFamily && { fontFamily }),
      ...(fontSize && { fontSize: typeof fontSize === 'number' ? `${fontSize}px` : fontSize }),
      ...(fontWeight && { fontWeight }),
      ...(textAlign && { textAlign }),
{%- endif %}
      ...(borderRadius && { borderRadius: typeof borderRadius === 'number' ? `${borderRadius}px` : borderRadius }),
      ...(display && { display }),
      ...(overflow && { overflow }),
      ...(position && {
        position: 'absolute' as const,
        left: position.x !== undefined ? `${position.x}px` : undefined,
        top: position.y !== undefined ? `${position.y}px` : undefined
      })
    }

{%- if uses_cva %}
    const {{ component_config.name | lower }}Classes = [
      {{ component_config.name | lower }}Variants({ {% include 'partials/variant-args.j2' %} }),
      className || ''
    ].filter(Boolean).join(' ')
{%- endif %}

{%- set classesVariable = component_config.name | lower + 'Classes' -%}
{%- include 'partials/component-render.j2' %}
  }
)

{{ component_name }}.displayName = "{{ component_name }}"

{%- if uses_cva %}
export { {{ component_name }}, {{ component_config.name | lower }}Variants }
{%- else %}
export { {{ component_name }} }
{%- endif %}